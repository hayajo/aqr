#!/usr/bin/env perl

use strict;
use warnings;

use File::Basename qw/dirname basename/;
use File::Spec::Functions qw/catfile rel2abs/;
use Getopt::Long qw/:config require_order no_ignore_case bundling/;
use Pod::Usage qw/pod2usage/;

use constant {
    PREFIX => 'aqr-',
    MOUNTS => '/proc/mounts',
};

sub main {
    GetOptions(
        'h|help' => sub { pod2usage(0) },
        'list'   => sub {
            my @subcmds = list_subcmd();
            if (@subcmds) {
                my $prefix = PREFIX;
                print
                    join("\n", map { (my $n = basename($_)) =~ s/^$prefix//; $n } @subcmds),
                    "\n";
            }
            else {
                print "no command\n";
            }
            exit;
        },
    ) or pod2usage(1);

    my $cmd = shift @ARGV || pod2usage(0);
    my $subcmd = lookup_subcmd($cmd)
        or die "$cmd is not aqr command";

    $ENV{AQR_PREFIX}  = PREFIX;
    $ENV{AQR_CGROOT} = lookup_cgroot()
        or die "cgroup hierarchy nonexistent";

    exec $subcmd, @ARGV;
}

sub lookup_subcmd {
    my $cmd = shift || return;
    my $subcmd = PREFIX . $cmd;
    for my $name (list_subcmd()) {
        return $name
            if basename($name) =~ m/$subcmd/;
    }
}

sub list_subcmd {
    my @subcmds;
    my $prefix = PREFIX;
    my $regex  = qr/^$prefix/;
    for my $dir (dirname($0), split(/:/, $ENV{PATH})) {
        opendir my $dh, $dir
            or next;
        for my $name (map { rel2abs(catfile($dir, $_)) } readdir $dh) {
            push @subcmds, $name
                if basename($name) =~ $regex && -f $name && -x $name;
        }
        close $dh;
    }
    return @subcmds;
}

sub lookup_cgroot {
    open my $fh, '<', MOUNTS;
    my @mounts = <$fh>;
    close $fh;

    for my $m (@mounts) {
      # see `man 5 fstab`.
      # fs_spec fs_file fs_vfstype fs_mntops fs_freq fs_passno
      #    0        1        2          3       4        5
      my($file, $vfstype) = (split / /, $m)[1, 2];
      return dirname($file)
        if $vfstype eq 'cgroup';
    }
}

main;

__END__

=head1 NAME

aqr - easy container runtime

=head1 SYNOPSIS

    # create a root filesystem with docker.
    docker export (docker create alpine hostname) | gzip > rootfs.tar.gz

    # run a command inside the rootfs.
    sudo tar xzf rootfs.tar.gz -C /path/ro/rootfs
    sudo aqr run /path/to/rootfs -- /bin/sh -l

    # list aqr containers
    sudo aqr list

    # cleanup cgroups
    sudo aqr clean

=head1 DESCRIPTION

`aqr` is a command line client for running applications packaged according to
`docker export`.

=head1 OPTIONS

=head2  --list

list available subcommands.

=head2 -h, --help

show help.

=cut

# -*- mode: perl -*-
# vi: set ft=perl :

